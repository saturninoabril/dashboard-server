package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __000001_auth_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xa8\xae\xd6\x2b\x28\x4a\x4d\xcb\xac\xa8\xad\x2d\xae\x2c\x2e\x49\xcd\xb5\xe6\x22\xa4\xae\xb4\x38\xb5\x88\xb0\xaa\xe2\xd4\xe2\xe2\xcc\xfc\x3c\xc2\x0a\x4b\xf2\xb3\x53\x89\x50\x56\x94\x9f\x93\x4a\x9c\xdb\xe2\x89\x53\x9a\x9f\x58\x5a\x92\x51\x5c\x92\x58\x92\x6a\xcd\x05\x08\x00\x00\xff\xff\xb9\x3a\x5c\xe9\x1b\x01\x00\x00")

func _000001_auth_down_sql() ([]byte, error) {
	return bindata_read(
		__000001_auth_down_sql,
		"000001_auth.down.sql",
	)
}

var __000001_auth_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x4f\x6f\x9b\x40\x10\xc5\xcf\xe6\x53\xcc\x2d\x50\x59\x95\x6d\xa5\x56\xa5\x9e\x70\xba\x69\x51\x29\x6e\xc9\xba\x4a\x4e\x68\x05\x83\xb2\x8a\xed\x45\xbb\x6b\xc7\x56\x94\xef\x5e\xf1\xb7\x18\x13\xdc\x3d\xb5\x5c\xb8\xfc\xf4\x66\xde\xbc\xd9\xb9\x09\x89\x4b\x09\x50\x77\xe1\x13\xf0\x6e\x21\x58\x52\x20\xf7\xde\x1d\xbd\x83\x97\x97\xf7\x99\xc4\x94\x1f\x5e\x5f\xd5\x51\x69\xdc\x80\x6d\x01\x00\x3c\xe1\x31\xff\xc1\x2f\x37\xbc\xf9\xea\x86\xf6\xfc\xda\x81\x1f\xa1\xf7\xdd\x0d\x1f\xe0\x1b\x79\x18\x17\xd0\x9e\xad\x77\xd8\x82\xa6\x93\xd9\xb5\x03\xc1\xca\xf7\x2d\xe7\x93\x65\xfd\x5d\xd9\x9d\x42\x59\x15\xe5\x09\x34\x5f\x21\x38\x9b\xf7\x54\x8d\x25\x32\x8d\x11\xd3\x00\xb0\xf0\xbe\x78\x01\x2d\x94\xf3\xb2\x25\xb0\xcb\x92\x61\x00\x37\x8c\xaf\xab\x3a\x6d\x83\x35\x05\xab\xc0\xfb\xb9\x22\x2d\x38\xda\xa3\xe4\x29\xc7\x04\x60\xb1\x5c\xfa\xc4\x0d\x3a\x92\x19\x53\xea\x59\xc8\xa4\x2d\x39\x9d\x7d\x74\x3a\x58\xca\xa5\xd2\xd1\x96\x6d\xb0\xbf\x72\x49\xad\x59\x03\x0d\x50\x4a\x33\x8d\x95\x0b\x4a\xee\x29\x7c\x26\xb7\xee\xca\xa7\x70\xc5\x62\xcd\xf7\x78\x65\x10\x82\x42\xa5\xb8\xd8\x1a\xe5\xa0\xc5\x13\x6e\xbb\xd4\x69\x8b\x17\xa3\xc2\x43\xc6\x25\xaa\x82\xe8\xcf\x52\xa1\x8c\xaa\x7e\xde\x1e\x45\xac\x64\x1a\x55\xfd\x9c\xb5\x62\x30\x86\x52\xc2\x3e\xb3\x37\xf8\x0a\x7a\x4c\xd6\x49\xfc\xe9\x50\x1f\xb3\x3a\xab\x13\xb5\x73\x12\x0f\x5a\xb2\x0e\x39\xfb\x30\x3f\x45\x0d\x3c\x49\xb1\x46\xa3\x5c\xf3\xc5\x1b\x35\x4b\xd5\xfb\x26\x06\x72\x6d\xda\xb4\x0b\x23\xb1\xb6\x31\x13\xf1\x23\xa4\x52\x6c\x60\x2b\x9e\x6d\xc7\x81\x77\x30\x9d\x4c\x26\xce\xc5\xd7\x6a\xa0\x65\x78\x70\xa2\xd6\x54\xda\x2b\xf6\xc6\x1e\xe7\x74\xc4\x93\xd1\xc8\x7c\xcf\xff\xd1\x3c\xc6\x56\x21\xd6\x0a\x17\xec\xca\xe8\xb8\xb6\x63\x32\x34\xc1\x76\xfa\xb1\xbc\x38\xff\xd1\x8d\xc8\x0d\xfc\x0e\x00\x00\xff\xff\x2c\xbf\x29\xd4\xdd\x06\x00\x00")

func _000001_auth_up_sql() ([]byte, error) {
	return bindata_read(
		__000001_auth_up_sql,
		"000001_auth.up.sql",
	)
}

var __000002_cycle_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xa8\xae\xd6\x2b\x28\x4a\x4d\xcb\xac\xa8\xad\x4d\xae\x4c\xce\x49\x2d\xb6\xe6\x22\xa4\xae\xb8\x20\x35\x39\x3e\xb5\x22\x35\xb9\xb4\x24\x33\x3f\x8f\x08\x0d\xc9\x89\xc5\xa9\x28\x1a\x00\x01\x00\x00\xff\xff\xcf\x0c\x41\x04\x8a\x00\x00\x00")

func _000002_cycle_down_sql() ([]byte, error) {
	return bindata_read(
		__000002_cycle_down_sql,
		"000002_cycle.down.sql",
	)
}

var __000002_cycle_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x96\x5f\x8f\xd2\x4c\x14\x87\xaf\x97\x4f\x31\x97\xed\x1b\xf2\x06\x8d\xd9\x1b\xaf\xca\x3a\x68\xb5\x5b\xb4\x14\xb3\x1b\x63\x26\xe3\xcc\x29\x4c\xe8\x76\x26\x33\xc3\x02\xd9\xec\x77\x37\x6d\xa1\x45\xfe\xb4\xc5\x68\xa2\x72\xd5\xd0\xa7\xa7\x9c\x93\xdf\x73\x86\x9b\x08\x7b\x31\x46\xb1\x37\x0c\x30\xf2\x47\x28\x1c\xc7\x08\xdf\xf9\x93\x78\x82\x9e\x9e\xfe\x57\x1a\x12\xb1\x7e\x7e\x66\x1b\x96\x82\x41\x4e\x0f\x21\x84\x04\x47\xd5\xe7\xe6\x9d\x17\x39\x2f\xaf\x5d\xf4\x31\xf2\x6f\xbd\xe8\x1e\x7d\xc0\xf7\xfd\x82\xd2\xa0\xe4\x55\x7e\xf1\xd9\x8b\x0a\xea\xfa\x95\x5b\x54\x0f\xa7\x41\x50\x22\xdf\x34\xcd\xd8\xbc\x0d\x5a\x8a\x94\xb7\x30\xc6\x52\x0b\x47\xcc\x1b\x3c\xf2\xa6\xc1\x0f\x9c\x02\x66\x88\x86\x99\x30\x16\x34\x14\x7d\x4c\x6e\xbd\x20\xf0\xc3\xb8\x2a\x59\x3d\x37\xd8\x7f\x88\xcb\x0c\x3a\xc0\x7c\xa9\xa9\x15\x32\xcb\xaf\x87\xfe\xdb\x26\x54\x51\x63\x76\x63\x6c\xad\x9b\x50\x91\x76\x86\x15\x64\x5c\x64\xb3\x6e\xb0\x59\x08\xa5\xca\x51\x74\x80\x2d\xd5\x96\x50\xbb\xd7\xde\xf1\x94\x21\xe3\x5b\xa4\x01\x62\x1b\xa5\xc1\x18\xf2\x08\xda\xe4\xf3\x6a\x4a\x89\x5c\x19\xd0\x24\xa3\x0f\xd0\x96\xa7\x92\x6c\xaf\x39\x07\xca\x53\x28\xe7\x3f\x1c\x8f\x03\xec\x85\xd5\x6f\x8c\xa3\x29\x2e\x29\x69\x8a\x97\xb6\x84\x4f\xd6\x4d\x34\x50\x99\xe4\x50\x73\x4d\x24\xd3\x40\x2d\x94\x13\x3c\x17\x21\x07\xd6\x56\x53\x66\x1d\x50\x92\xcd\x51\xa2\xe5\x03\xca\xe4\xca\x71\x5d\xf4\x1f\x7a\x31\x18\x0c\xdc\xb2\xd6\x52\xf1\x5f\x50\xab\xe7\xbe\xee\xf5\xba\x2d\x8a\x5c\x16\x02\x6b\x60\xcb\xdc\x82\xcb\x36\x46\x22\xd2\x72\xd6\x31\xbe\x8b\x0f\x0d\x07\xfd\x08\xba\xbe\x7b\xc2\xed\x8e\x3b\xe0\x02\x43\x2d\x18\x6b\x3a\x4b\xf7\x37\xea\x2c\xb5\x25\x2b\x10\xb3\xb9\x6d\x87\xf3\x69\x90\xbd\x05\x70\x56\xed\x02\xdc\x2e\x81\xf3\xfe\xff\x71\x29\xef\xf7\xb6\x8b\x89\xa5\x40\xca\xc4\x56\x59\x8d\xf0\x08\x47\x38\xbc\xc1\x27\x4e\x45\x47\xf0\x7d\x85\x8b\x22\xd3\xd0\xff\x34\xc5\x4e\x9e\xe8\x7e\x55\xf1\x12\x8f\x18\x35\xf0\xb3\x1e\x59\x61\xf7\x44\xfa\xf2\xf5\x40\xa5\x64\x99\xa6\xa4\x60\x4e\x9a\xb6\x80\xcd\xd5\xee\x1d\xcd\x26\x2d\x60\x43\x8c\x05\xd5\xe1\xdc\xfd\x3d\x6e\x76\x4a\x23\x93\x1c\x76\xfd\xe4\xed\x6e\xcf\x28\xad\xa5\x26\x5c\x18\x95\xd2\xcd\x89\x3b\x89\xce\x4f\x9b\xfa\x5b\xc3\x34\x40\x66\xe6\xd2\x22\xf4\x7e\x32\x0e\x87\xff\x78\x8a\x77\x7f\x7c\xea\x0c\x96\xc5\x5a\x6a\x1d\xac\xff\x26\x35\xaa\x14\xd6\x82\xf4\x8f\x5f\x59\x38\xf3\x3d\x00\x00\xff\xff\xc0\x7d\xbc\x3c\xa4\x0a\x00\x00")

func _000002_cycle_up_sql() ([]byte, error) {
	return bindata_read(
		__000002_cycle_up_sql,
		"000002_cycle.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"000001_auth.down.sql": _000001_auth_down_sql,
	"000001_auth.up.sql": _000001_auth_up_sql,
	"000002_cycle.down.sql": _000002_cycle_down_sql,
	"000002_cycle.up.sql": _000002_cycle_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"000001_auth.down.sql": &_bintree_t{_000001_auth_down_sql, map[string]*_bintree_t{
	}},
	"000001_auth.up.sql": &_bintree_t{_000001_auth_up_sql, map[string]*_bintree_t{
	}},
	"000002_cycle.down.sql": &_bintree_t{_000002_cycle_down_sql, map[string]*_bintree_t{
	}},
	"000002_cycle.up.sql": &_bintree_t{_000002_cycle_up_sql, map[string]*_bintree_t{
	}},
}}
