package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __000001_init_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xa8\xae\xd6\x2b\x28\x4a\x4d\xcb\xac\xa8\xad\x0d\xae\x2c\x2e\x49\xcd\xb5\xe6\x22\xa4\x2e\xb4\x38\xb5\xa8\x98\xb0\xb2\xe0\xd4\xe2\xe2\xcc\xfc\x3c\xc2\x0a\x43\xf2\xb3\x53\xf3\x88\x30\x30\x28\x3f\x27\x95\x08\x65\x20\xe7\x41\x95\x02\x02\x00\x00\xff\xff\x4b\xb5\x56\x89\xf2\x00\x00\x00")

func _000001_init_down_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_down_sql,
		"000001_init.down.sql",
	)
}

var __000001_init_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x8f\xda\x30\x10\xc5\xcf\xf0\x29\xe6\xb6\x49\xb5\xaa\x00\x6d\x51\xa5\x9e\x0c\x38\xad\xb5\x69\xd8\x26\x0e\x5a\x8e\x16\x0c\xaa\x55\x42\x22\xdb\xed\x82\x56\xfb\xdd\xab\xfc\x6b\x42\x12\xd8\xa6\xdd\x5c\x72\xf0\x4f\x33\xef\xcd\x3c\x7b\xee\x53\xc2\x29\x70\x32\x73\x29\x30\x07\xbc\x25\x07\xfa\xc8\x02\x1e\xc0\xf3\xf3\xfb\x44\xe1\x4e\x1e\x5f\x5e\x82\x93\x36\x18\x81\x35\x04\x00\xb8\xc7\x53\xfa\x5b\x11\x7f\xfe\x85\xf8\xd6\xf4\xce\x86\x07\x9f\x7d\x25\xfe\x1a\xee\xe9\xfa\x36\x63\x56\x62\xff\x13\x2b\x66\x3c\x9a\xdc\xd9\xe0\x85\xae\x3b\xb4\x3f\x0d\x87\x7f\xd7\x34\xd4\xa8\x74\xd1\x93\x2d\xa0\xfc\xb2\x82\x93\x69\x47\xd3\xb9\x42\x61\x90\x18\x00\x98\xb1\xcf\xcc\xe3\x59\xe1\xb4\x6b\x7e\x1e\x26\xdb\xab\xe7\x34\x12\x72\x9f\x37\xa9\x9b\x2b\x21\x08\x3d\xf6\x2d\xa4\x35\x76\x85\x4a\xee\x24\x6e\x01\x66\xcb\xa5\x4b\x89\xd7\x28\xf8\x20\xb4\x7e\x8a\xd5\xb6\x56\x70\x3c\xf9\x68\x37\x28\x47\x2a\x6d\x3c\x11\x61\x77\xdb\x1c\x72\x45\xc9\x5c\x81\x02\x23\x0c\x02\xa7\x8f\x1c\x16\xd4\x21\xa1\xcb\xe1\x46\x6c\x8c\xfc\x85\x37\x3d\xe6\x1e\xa0\xd6\x32\x3e\xf4\x99\x3c\x8f\x7f\xe0\xa1\x01\x9d\x4b\x7b\x6d\x37\xf4\x98\x48\x85\x3a\x05\xba\x77\xa7\x51\x15\x52\x2e\xfb\x9f\x07\xbe\x53\x48\x69\xc9\xe8\x31\x80\xac\x44\x99\xbc\xca\xda\xd5\xc0\x57\xfe\x0a\xf9\xe5\x02\x2a\x75\xfc\x94\x60\x3b\x5d\x6d\x8e\x1e\x8d\x12\x67\xdc\xe4\xc3\xf4\x1c\xec\x61\xc6\x8f\xf7\xd8\xbe\x45\x97\x57\x99\x86\x6c\x00\x79\x88\x3a\x93\xdf\x72\xfa\x87\x2a\x15\x5a\x98\x3a\xd8\x18\x0b\x93\x78\xf3\x1d\x76\x2a\x8e\xe0\x10\x3f\x59\xb6\x0d\xef\x60\x3c\x1a\x8d\xec\xe6\x7d\xfc\xf7\x4a\x3d\xdf\x93\xfa\x34\x6a\x91\xba\x94\xda\x14\x67\x8b\xc1\xe0\xf5\x50\xbf\xe1\x30\xfe\xbf\x56\xb9\xd4\xec\xb5\xa6\x6b\xb0\x72\xab\xb7\x85\x9f\x6c\x68\xbf\x03\x00\x00\xff\xff\xba\x19\x42\xda\xf9\x05\x00\x00")

func _000001_init_up_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_up_sql,
		"000001_init.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"000001_init.down.sql": _000001_init_down_sql,
	"000001_init.up.sql": _000001_init_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"000001_init.down.sql": &_bintree_t{_000001_init_down_sql, map[string]*_bintree_t{
	}},
	"000001_init.up.sql": &_bintree_t{_000001_init_up_sql, map[string]*_bintree_t{
	}},
}}
