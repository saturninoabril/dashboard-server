package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __000001_init_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xa8\xae\xd6\x2b\x28\x4a\x4d\xcb\xac\xa8\xad\x0d\xae\x2c\x2e\x49\xcd\xb5\xe6\x22\xa4\x2e\xb4\x38\xb5\xa8\x98\xb0\xb2\xe0\xd4\xe2\xe2\xcc\xfc\x3c\xc2\x0a\x43\xf2\xb3\x53\xf3\x88\x30\x30\x28\x3f\x27\x95\x08\x65\x20\xe7\x41\x95\x02\x02\x00\x00\xff\xff\x4b\xb5\x56\x89\xf2\x00\x00\x00")

func _000001_init_down_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_down_sql,
		"000001_init.down.sql",
	)
}

var __000001_init_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x6f\x9b\x40\x10\xc5\xcf\xf6\xa7\x98\x5b\xa0\x8a\x2a\xdb\x4a\xad\x4a\x3d\xe1\x74\xd3\xa2\x50\xdc\x92\xa5\x8a\x4f\x68\x05\x83\xba\x0a\xff\xb4\xbb\x76\x6c\x45\xf9\xee\x15\x04\xd2\x05\x83\x6b\xda\xec\xc5\x97\x9f\x67\xde\x9b\x37\xc3\xb5\x47\x2c\x4a\x80\x5a\x2b\x87\x80\x7d\x03\xee\x9a\x02\xb9\xb7\xef\xe8\x1d\x3c\x3d\xbd\x2f\x04\xc6\x7c\xff\xfc\x2c\x0f\x52\x61\x2a\xc1\x98\x02\x00\x3c\xe0\xa1\xfc\x81\x9f\x96\x77\xfd\xd5\xf2\x8c\xe5\x95\x09\xdf\x3d\xfb\x9b\xe5\x6d\xe0\x96\x6c\x2e\x2b\x68\xc7\x92\x2d\x6a\xd0\x7c\xb6\xb8\x32\xc1\xf5\x1d\x67\x6a\x7e\x9a\x4e\xcf\xeb\xbb\x95\x28\x9a\xae\x3c\x82\xd6\xab\xaa\x2e\x96\x3d\xad\x43\x81\x4c\x61\xc0\x54\x4d\xae\xec\x2f\xb6\x4b\xab\x16\x65\xff\x17\x68\x5b\x44\x7f\x87\x30\x65\x3c\xd1\x7a\xea\x8e\x1b\x12\x7c\xd7\xfe\xe1\x13\xed\x0f\xc1\x0e\x05\x8f\x39\x46\x00\xab\xf5\xda\x21\x96\xdb\x29\x5b\x30\x29\x1f\x73\x11\x75\xcb\xce\x17\x1f\xcd\x0e\x1a\x73\x21\x55\x90\xb1\x14\x87\x15\xbc\x90\x09\x6b\x81\x27\x48\xa9\x98\x42\xcd\x15\x25\xf7\x14\x3e\x93\x1b\xcb\x77\x28\x5c\xb0\x50\xf1\x1d\x5e\x8c\x48\x49\xa2\x94\x3c\xcf\xfa\x82\x1a\x0e\x49\xe5\x0f\x98\x75\xa9\xb6\x4e\x3d\xc7\xfe\x78\xf6\x05\x17\x28\x2b\xa2\x3f\x64\x89\x22\xa8\xf5\x0c\xcf\x23\x94\x22\x0e\x6a\x3d\x47\x52\x46\xcc\xa1\x2a\xd1\x4c\x41\xf7\x77\xf2\x50\x7a\x5c\x36\x59\xfc\x91\xa8\x0e\x05\xf6\x2d\xe1\x31\x89\x7b\x25\x58\x87\x5c\x7c\x58\xb6\xd1\x11\xa6\x44\x9e\xe0\xb8\x64\xcb\x1d\x9c\xbc\xee\x55\xef\x99\x9c\x48\xf6\x55\xa7\x51\x39\x09\x95\x81\x45\x1e\xfe\x82\x58\xe4\x29\x64\xf9\xa3\x61\x9a\xf0\x0e\xe6\xb3\xd9\xcc\x3c\x3e\xe4\x7f\xaf\x35\xf2\xa3\x14\xe8\x63\xd1\xb7\x6c\x68\x97\x4b\x3e\xe0\xd1\x64\x72\xc6\xae\xbf\xe9\x48\xfe\xbb\x58\x93\x6f\xf9\x6e\xc9\x06\x8c\xda\xee\x65\xe3\xa9\x9a\xdd\xef\x00\x00\x00\xff\xff\x4b\xe7\x56\x1b\x48\x06\x00\x00")

func _000001_init_up_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_up_sql,
		"000001_init.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"000001_init.down.sql": _000001_init_down_sql,
	"000001_init.up.sql": _000001_init_up_sql,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"000001_init.down.sql": &_bintree_t{_000001_init_down_sql, map[string]*_bintree_t{
	}},
	"000001_init.up.sql": &_bintree_t{_000001_init_up_sql, map[string]*_bintree_t{
	}},
}}
